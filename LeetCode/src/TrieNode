package com.huawei.bme;

import java.util.ArrayList;
import java.util.List;
import java.util.Stack;

import com.huawei.bme.exception.IllegalWordException;
import com.huawei.bme.exception.NoExistException;

public class Trie {
	//根目录
	private final TrieNode root;
	
	
	public Trie(){
		root = new TrieNode('/');
	}
	
	
	public void insert(String word,long lineNumber){
		if(word == null || word.isEmpty()){
			throw new IllegalArgumentException("word can not be null or empty!");
		}
		
		if(lineNumber < 0L ){
			throw new IllegalArgumentException("line number can not be less than 0L");
		}
		
		TrieNode node = root;
		char[] chars = word.toCharArray();
		for (int i = 0; i < chars.length; i++) {
			
			TrieNode childNode = node.getChild(chars[i]);
			if(childNode == null){
				childNode = new TrieNode(chars[i],false);
				node.insert(childNode);
			}
			node = childNode;
		}
		
		node.isTerminal = true;
		node.lineNumber = lineNumber;
	}
	
	public long findWord(String word){
		if(word == null || word.isEmpty()){
			throw new IllegalArgumentException("word can not be null or empty!");
		}
		
		long line = -1L;
		char[] chars = word.toCharArray();
		TrieNode node = root;
		
		for (int i = 0; i < chars.length; i++) {
			TrieNode childNode = node.getChild(chars[i]);
			if(childNode == null){
				throw new NoExistException("char "+chars[i]+" not found!");
			}
			node = childNode;
		}
		
		if(!node.isTerminal){
			throw new IllegalWordException(word+" is not a word!");
		}
		line =  node.lineNumber;
		return line;
	}
	
	public String[] findPrefix(final String prefix){
		List<String> list = new ArrayList<String>(5);
		
		char[] chars = prefix.toCharArray();
		TrieNode node = root;
		for (int i = 0; i < chars.length; i++) {
			TrieNode childNode = node.getChild(chars[i]);
			if(childNode == null){
				throw new NoExistException("char "+chars[i]+" not found!");
			}
			node = childNode;
		}
		if(node.isTerminal){
			list.add(prefix);
		}
		
		Stack<TrieNode> stack = new Stack<TrieNode>();
		
		search(node,stack,list,prefix);
		
		String[] arrays = new String[list.size()];
		
		return list.toArray(arrays);
	}
	
	private void search(TrieNode node,Stack<TrieNode> stack,List<String> list,String prefix){
		if(list.size() >= 5){
			return;
		}
		
		
		if(node.getFirstChild() == null){
			list.add(prefix);
			TrieNode parent = stack.pop();
			TrieNode next = parent.getNextChild(node.get());
			if(next != null){
				stack.push(parent);
				search(next,stack,list,prefix+next.get());
			}else{
				return;
			}
		}else{
			if(node.isTerminal){
				list.add(prefix);
			}
			TrieNode child = node.getFirstChild();
			stack.push(node);
			search(child,stack,list,prefix+child.get());
			child = node.getNextChild(child.get());
			while( child != null){
				search(child,stack,list,prefix+child.get());
				child = node.getNextChild(child.get());
			}
			
		}
		
	}
	
	
	
	
	
	
	class TrieNode{
		
		private static final int letter_count = 26;
		
		char letter;
		
		boolean isTerminal = false;
		
		long lineNumber = -1L;
		
		private TrieNode[] childrenNode = new TrieNode[letter_count];
		
		/**
		 * 
		 * @param letter
		 * @param isTerminal
		 */
		public TrieNode(char letter,boolean isTerminal){
			this.letter = letter;
			this.isTerminal = isTerminal;
		}
		
		public TrieNode(char letter,long lineNumber){
			this.letter = letter;
			this.isTerminal = true;
			this.lineNumber = lineNumber;
		}
		
		public TrieNode(char letter){
			this.letter = letter;
		}
		
		public boolean isTerminal(){
			return this.isTerminal;
		}
		
		public char get(){
			return letter;
		}
		
		public void insert(TrieNode node){
			if(node == null){
				throw new NullPointerException("node is null!");
			}
			
			
			int index = node.get()-'a';
			
			if(index < 0 || index >= letter_count){
				throw new IllegalStateException("char is illegal character!");
			}
			
			childrenNode[index] = node;
		}
		
		public long getLineNumber(){
			if(!isTerminal){
				throw new IllegalStateException("not terminal ,no line Number");
			}
			
			return lineNumber;
		}
		
		public TrieNode getChild(char child){
			int index = child-'a';
			
			if(index < 0 || index >= letter_count){
				throw new ArrayIndexOutOfBoundsException(index+" is out of bounds");
			}
			
			return  childrenNode[index];
		}
		
		public TrieNode getNextChild(char child){
			int index = child -'a';
			
			if(index < 0 || index >= letter_count){
				throw new ArrayIndexOutOfBoundsException(index+" is out of bounds");
			}
			index++;
			for(;index < letter_count; index++){
				if(childrenNode[index] != null){
					return childrenNode[index];
				}
			}
			return null;
		}
		
		public TrieNode getFirstChild(){
			for (int i = 0; i < childrenNode.length; i++) {
				if(childrenNode[i] != null){
					return childrenNode[i];
				}
			}
			return null;
		}
		
		
	}

}
